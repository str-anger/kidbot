import telegram
import logging
import settings
import buttons
import time
import os

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

############ Command Handlers ##########################
def hello_handler(bot, update):
    update.message.reply_text(
        'Hello {}'.format(update.message.from_user.first_name))


def start_handler(bot, update):
    text = update.message.text
    author = update.message.from_user.username
    intro = ("–ü—Ä–∏–≤–µ—Ç @{}! –ü–∏—à–∏ –º–Ω–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Å–≤–æ—ë–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–µ" +
            ", –∞ —è –ø–æ—Ç–∏—Ö–æ–Ω—å–∫—É –Ω–∞—É—á—É—Å—å –¥–µ–ª–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫—É. " + 
            "–ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–æ–±—ã—Ç–∏—è –µ—â—ë –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ").format(author)
    bot.send_message(
        text=intro,
        chat_id=update.message.chat_id,
        reply_markup=telegram.ReplyKeyboardMarkup(buttons.START_BUTTONS)
    )


def ask_for_params_handler(bot, update, state, text, keys=None):
    chat_id = update.message.chat_id
    settings.Context['states'][chat_id] = state
    bot.send_message(text=text, chat_id=chat_id, reply_markup=keys)


def record_no_ask(bot, update, state):
    try:
        who = update.message.from_user.username
        chat_id = update.message.chat_id
        where = os.path.join(settings.Context['data-folder'], who)
        answer = "{}\t{}\n".format(int(update.message.date.timestamp()), state)
        with open(where, 'at', encoding="utf-8") as f:
            f.write(answer)
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–∞–∑–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
        settings.Context['states'][chat_id] = None
        bot.send_message(
            text="–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–∏—Å–∞–ª —Å–æ–±—ã—Ç–∏–µ:\n `{}`".format(answer),
            chat_id=chat_id,
            reply_markup=telegram.ReplyKeyboardMarkup(buttons.START_BUTTONS),
            parse_mode=telegram.ParseMode.MARKDOWN
        )
    except Exception as e:
        print(e)


CommandMap = {
    '/hello': hello_handler,
    '/start': start_handler,
    '/üë©üçî': lambda b, u: ask_for_params_handler(b, u, "mom_food", "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ–ª–∞:"),
    '/üöºüçî': lambda b, u: ask_for_params_handler(b, u, "child_food", "–ù–∞–ø–∏—à–∏, —á—Ç–æ –µ–ª —Ä–µ–±—ë–Ω–æ–∫:"),
    '/üöº—Ä–æ—Å—Ç': lambda b, u: ask_for_params_handler(b, u, "child_len", "–ù–∞–ø–∏—à–∏ —Ä–æ—Å—Ç (—Å–º):"),
    '/üöº–≤–µ—Å': lambda b, u: ask_for_params_handler(b, u, "child_weight", "–ù–∞–ø–∏—à–∏ –≤–µ—Å (–∫–≥):"),
    '/üöºüíä': lambda b, u: ask_for_params_handler(b, u, "child_pills", "–ß—Ç–æ –¥–∞–ª–∏ —Ä–µ–±—ë–Ω–∫—É:"),
    '/üë©üíä': lambda b, u: ask_for_params_handler(b, u, "mom_pills", "–ß—Ç–æ –¥–∞–ª–∏ –º–∞–º–µ:"),
    '/üöºü§í': lambda b, u: ask_for_params_handler(b, u, "child_ill", "–ù–∞–ø–∏—à–∏ —Å–∏–º–ø—Ç–æ–º –∏–ª–∏ –¥–∏–∞–≥–Ω–æ–∑ —Ä–µ–±—ë–Ω–∫–∞:"),
    '/üë©ü§í': lambda b, u: ask_for_params_handler(b, u, "mom_ill", "–ù–∞–ø–∏—à–∏ —Å–∏–º–ø—Ç–æ–º –∏–ª–∏ –¥–∏–∞–≥–Ω–æ–∑ –º–∞–º—ã:"),
    # '/üåè': lambda b, u: record_no_ask(b, u, "location"),
    '/üöºüò¥': lambda b, u: record_no_ask(b, u, "sleep"),
    '/üöºüòú': lambda b, u: record_no_ask(b, u, "wakeup"),
}

def handler(bot, update):
    print(update)
    cmd = update.message.text.split()[0]
    CommandMap[cmd](bot, update)
